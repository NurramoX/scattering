import java.nio.charset.StandardCharsets

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.11.1/samples
 */

plugins {
    java
    id("com.diffplug.spotless") version "6.25.0"
}

repositories {
    mavenCentral()
}

dependencies {
    // This adds Error Prone compiler
    annotationProcessor("com.google.errorprone:error_prone_core:2.24.1")
    // This adds just the annotations
    compileOnly("com.google.errorprone:error_prone_annotations:2.24.1")
}

spotless {
    encoding(StandardCharsets.UTF_8)

    java {
        // Import handling should come before formatting
        importOrder()

        // Formatting should be in the middle
        googleJavaFormat().aosp()

        // Basic cleanup should come last
        trimTrailingWhitespace()
        endWithNewline()

        indentWithSpaces(4)

        // Target Java files
        target("src/*/java/**/*.java")
        // Exclude generated files if any
        targetExclude("src/generated/**/*.java")

        custom("Lambda fix") {
            it.replace("} )", "})").replace("} ,", "},")
        }
    }

    yaml {
        target("*.yaml")
        targetExclude(".venv/**/*")
        targetExclude("venv/**/*")
        jackson()
            .yamlFeature("ALWAYS_QUOTE_NUMBERS_AS_STRINGS", true)
            .yamlFeature("SPLIT_LINES", true)
            .yamlFeature("WRITE_DOC_START_MARKER", true)
        // any YAMLGenerator. Feature can be toggled on or off
    }

    kotlinGradle {
        target("*.gradle.kts")
        ktlint()
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.isFork = true

    val errorProneChecks =
        listOf(
            "-Xplugin:ErrorProne",
            "-Xep:DeadException:ERROR",
            "-Xep:Var:WARN",
            "-Xep:AndroidInjectionBeforeSuper:OFF",
            "-Xep:AndroidJdkLibsChecker:OFF",
            "-Xep:StaticOrDefaultInterfaceMethod:OFF",
            "-Xep:InjectOnConstructorOfAbstractClass:OFF",
            "-Xep:GuiceInjectOnFinalField:OFF",
        ).joinToString(" ")

    options.compilerArgs.addAll(
        listOf(
            errorProneChecks,
            "-XDcompilePolicy=simple",
            "--should-stop=ifError=FLOW",
        ),
    )

    options.forkOptions.jvmArgs?.addAll(
        listOf(
            "--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
            "--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
            "--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
            "--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
        ),
    )
}
